Hello, hello, hello. This is the Vanilla JavaScript Podcast. I'm Chris Ferdinandi. Thanks so much for joining me. Today, I'm talking about how to know what to focus on as a web developer.

I ask everyone who signs up for my newsletter the same question. What's the biggest challenge you face as a web developer? I get back a lot of responses, but I get back a few variations of the same response more than anything else.

> I have a tough time keeping up with all of the changes in our industry. I don't know what to focus on.

Some version of that accounts for at least half of all of the responses I get. Today, I wanted to talk about how I handle this and some recommendations for you, regardless of where you are in your career journey. Let's dig in. So the first one, and this one's a big one, is stop trying to keep up.

I'm being a bit glib here, but obviously, as a web developer, it's important for you to have a sense of changes in the industry, but you should stop trying to keep up with everything. Our industry continues to get bigger, and as it does, it becomes impossible to know everything about everything.

You literally cannot keep up, and trying to do so is a recipe for burnout. For example, new JavaScript libraries come out all the time, jumping from Angular to Vue to React to Preact to Next to Svelte to Astro to whatever comes next.

It's not just exhausting, it's pointless. You're gonna lose more in productivity as part of the transition than you gain in benefit for yourself or your users. Give yourself permission to not keep up with everything that's happening. It's incredibly freeing. Second, pay attention to the big trends.

While you should stop trying to keep up with every new tool that comes out, you should try to keep up with big shifts in the industry. When I was just getting started as a web developer, Ethan Marcotte had just started talking about responsive web design, and it was about to change everything about how we built for the web.

Being aware of that and how it impacted our work as developers put me in a really great place when I was just starting my career. It helped me stand out and it helped me make better decisions about where I did and didn't want to go work early in my career.

For example, I met some developer or some recruiters, rather, who just wrote responsive web design off as a trend that was gonna die really quickly, and I knew that was not a place I wanted to go work because I could feel this shift happening in the industry. I wasn't an expert on RWD, or anything web dev for that matter, but I knew enough.

And while responsive web design was a huge shift in our industry, smaller but still impactful changes happen every few years. The transition from traditional DOM manipulation to state-based UI was one of them. And if you were aware of it at the time, digging into libraries like Vue or React was probably a better use of your time than learning jQuery.

Today, I think we're seeing a similar shift happen as transitional apps and static site generators become more dominant. And we're also seeing a renaissance in browser-native JavaScript, AKA vanilla.js. So how do you pay attention to trends without following every new thing that comes out? So as you become more seasoned, you'll get better at spotting trends. But one thing I do personally is follow a range of people from various specialties in our industry.

I follow some folks on browser teams. I follow some folks who specialize in CSS architecture. I follow some JavaScript people. I follow some designers. When something big is happening, you'll usually notice an overlap in the topics that these different groups of people are talking about. The big industry shifts impact folks across disciplines, and so they all start to take notice.

You'll see designers and developers and browser vendors all kind of talking about these same topics from slightly different angles. And that's usually your cue to pay attention to. You don't want to be the pioneer trying every new thing out. You want to be a fast follower who's aware of big shifts early, but isn't chasing every shiny new ball that never goes anywhere either.

Another really kind of key thing for me has been practicing just-in-time learning.

As I mentioned earlier, we are in a renaissance for browser-native features, and not just for JavaScript. Browser vendors keep shipping amazing HTML, CSS, and JS features that make it easier to work with and for the web, and add new capabilities to the platform. But these new enhancements don't make older ways of doing things obsolete.

Following industry experts can help you stay aware of new features without requiring you to actually go learn them. When you run into a problem where you think a newer tool in the browser ecosystem can help, versus maybe what you've traditionally done, that's when you learn the new thing.

For example, both Flexbox and CSS Grid had been out for years before I learned how to use either of them. Float-based grid layouts continue to work just fine for a majority of the things I was building for a long time. And then one day I was working on this complex layout that was either impossible or really hard to implement with floats.

I took a look at CSS Grid and that was it. It made my life easier, and it was easier to learn because there was now an ecosystem of learning resources built around it that weren't when it first came out. So what should you learn right now? A common question I get from students is, what should I learn right now if I'm looking for a job?

I have some opinions, obviously. So if you're early in your career, React shows up on a majority of job descriptions and Preact has a similar API and better performance.

So that's also worth a look. If you already know state-based UI or are a more seasoned developer in your career, tools like Svelte React, Svelte rather, Astro and Eleventy coupled with JAMstack infrastructure like Netlify and Cloudflare are the future. That's where I see the industry going, but I think we've got a little while.

So if you're, I need a job right now, state-based UI. If you're thinking in the mid to long term, I think some of these other tools are going to be a worthwhile investment of your time. Employers aren't quite there yet, but investing in that knowledge now will position you as a go-to expert once they catch up.

So anyways, that's it for today. If you wanna finally master JavaScript, head over to vanillajsguides.com to check out my courses and eBooks or head over to vanillajsacademy.com to learn more about a workshop I run a few times a year that's gonna give you more hands-on experience and a whole bunch of accountability. As a listener of this show, you can get 30% off with the code podcast at checkout.

See you next time, cheers.