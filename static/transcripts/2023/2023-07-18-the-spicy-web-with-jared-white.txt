Chris: Hello, hello, hello. This is the vanilla JavaScript podcast. I'm Chris Ferdinandi. Thanks so much for joining me today. I am joined by a fellow vanilla web evangelist, Jared White, and I'm really, really, really hyped to have him on the show because, uh, He evangelizes a lot of the same stuff that I do. He works on a lot of really cool projects.

And those of you who read my newsletter may have seen that recent video. Um, I shared from Jared talking about web components and how awesome they are. Um, so, uh, Jared, thank you so much for being on the show. I'm really happy to have you here.

Jared: Oh, thanks so much, Chris. I'm excited to be here. So,

Chris: uh, Jared, for folks who don't know who you are or what you do, um, would you mind just.

Telling people a little bit about yourself.

Jared: Sure, sure. Um, so, yeah, some folks may know me through, as you said, my, my sort of evangelism project of, uh, talking a lot about the web and vanilla technologies, and that's through a website called the Spicy Web, and we have a Discord group, uh, also, which is pretty lively.

Uh, other folks know me through my work on a project called Bridgetown, which is a Ruby based static site generator and web framework. Uh, and then my day job, if you will, is, uh, working with a variety of clients on various web projects. Uh, some, some more focused on the front end these days and kind of building out design systems and component libraries and that sort of thing, which is pretty interesting work.

Um, but I, I, I dabble in. The back end as well and full stack and all this different stuff, right? Uh, I've been in this biz a long time. So, uh, at this point, I'm sort of a, a generalist, I guess you could say versus, you know, the web has sort of evolved into this thing where there are so many different specialists in so many different areas.

Uh, but, but I like to, I like to keep sort of a zoomed out view of things.

Chris: Um, I'm gonna make sure I drop links in the show notes to all the different stuff you mentioned. Um, I actually just heard about Bridgetown for the first time like two days ago. Uh, so I'm in the front end horse discord as well. Um, uh, run by Alex Trost. And, uh, yeah, like a couple days ago, there was a whole bunch of conversation around Bridgetown that happened there, um, which caused me to go look at it.

Um, so, uh, really cool. I'm a big fan of static site generators. Um, so, uh, yeah, that's really neat. I did not, I did not know about it before then. So, uh, super cool stuff. And I actually, even though I learned about it, it, I did not connect the dots that, uh, It was yours.

Jared: Okay. Yeah. Uh, you know, there's, there's some, there's some pretty exciting projects these days.

Um, and maybe we'll touch on them, uh, in the show, but, um, you know, for people who know JavaScript well, right? Like we have Eleventy and Astro, and there's a few others that. Or in the, uh, what you might call the, the good bucket. There, there are some maybe not so good ones out there as well. But, um, from my vantage point, um, uh, even though I do a lot of friend and work, uh, I also like working a lot with Ruby and building web applications with that language.

And, uh, it was kind of bumming me out a few years ago that it seemed like a lot of interesting stuff happening in the world of, Static site generators and beyond were no longer really happening in the world of Ruby. Uh, you know, this, uh, the project called Jekyll kind of kicked things off in a way because it was part of GitHub pages.

And, you know, that started like well over a decade ago. I forgot about that. That's right. Yeah. Yeah. So Jekyll's kind of how I cut my teeth with the, the idea of the one quote, modern static site generator. Uh, I, I put that in quotes because, uh, you know, static site generators actually have been around almost as long as the web, but they kind of fell out of fashion.

We got, you know, like WordPress and a lot of sort of dynamic CMS kind of tools to, to build websites with, but, um, but now they're back and it's some pretty exciting stuff. Yeah. Yeah. I

Chris: think on the white fusion website, you may be referred to Ruby as the best programming language ever. Why do you love it so much?

Just, just curious. I am. I tried to dabble in Ruby and just couldn't wrap my head around it. So I'm curious to hear what, um, what makes it rock so hard to you. I know a couple of other folks were really passionate about it. Yeah. So, uh,

Jared: Ruby. Kind of bills itself as being optimized for programmer happiness, and that's, that's very fuzzy.

And maybe my happiness is not your happiness. So there's, you know, there's room for debate there. But I think the idea behind that is. If, if you're looking at two decisions with like language syntax or, you know, how to, how to build a new library or how to do this or that in the language and the ecosystem, if you have two choices and one optimizes for like pure efficiency, like in, in the CPU, right?

Like here, speed, pure efficiency, but. There's a lot more ceremony and like lower level access to all this different stuff the programmer has to learn about and understand and keep all these mental models in their heads, right? Like that, that's one approach. And then the other approach is what's the, what's the clearest, most expressive, most, almost English like syntax we can provide for this great DX and Maybe the side effect of that is that it's not quite as efficient as it could be.

But that's okay, because we're optimizing for programmer happiness. That first comment

Chris: felt like a dig at Go, and if it was, that's totally fine. I use Hugo

Jared: as my static site. Like Rust and some of these other languages that are increasingly popular now, like, definitely are at that lower level and you have to have a lot of knowledge about like, you know, what's going to help the compiler optimize for, you know, speed and efficiency and type safety and a bunch of things, uh, and Ruby is, you know, from the era of Dynamic languages where we don't have to concern ourself with such a petty notions.

We can rise above it and just express these very erudite thoughts in code. And so I like that. So since

Chris: we're talking about developer experience, this feels like a really nice transition into, um, I think kind of the meat of what I really wanted to talk to you about today. Um, so a lot of the kind of.

Modern best practices around building for the web are very heavy around JavaScript libraries and, um, either running a bunch of code in the, um, in the browser directly, or increasingly we're seeing this thing where you just, you take those and you slap some compiler over them to, um, like I'm thinking about like Astro, for example, right?

Where like, uh, You know, it's, you're still writing in react. You're just spitting out mostly HTML, um, at the end of the day. So, um, one of the big arguments for those tools for a while has been, well, the developer experience, the developer experience, um, uh, and you and I had had a little chat, uh, a while back about, um, kind of this idea of decoupling from some of these frameworks.

So from your perspective, what, um, you know, what, I guess, what, when is developer experience. The prior, I have a bunch of questions here, I guess. But so when, how does developer experience fit into the decision tree for the tools you use? Um, so, you know, when, when is that a good thing that you should focus on?

And when is it, when is it problematic? Cause I think I talked to a lot of developers who are like, well, react is good because it makes us more efficient as developers.

Jared: Yeah. So this is definitely a, this is definitely a big topic. Uh, and I think about it a lot. Um, I think a lot about defaults and how tools can encourage folks towards good defaults or not so good defaults in my view.

Um, so, so I think it's important to parse this term developer experience. And so there's a couple different ways to look at it, you know, there's the, there's the thought that. Good developer experiences, I as a developer should just be able to conjure up all the ideas of how I think something should work.

And if this framework delivers those ideas to me, and I can use it, then great, like great developer experience. This makes sense to me, I can use it. The problem there is if, if those ideas as presented to you, and you, as you start using them are in many ways, encouraging. a number of bad habits for the actual platform you're writing on.

So, you know, we're here to talk about the web. So I'm primarily considering the web here, but these issues can come up as well on, you know, native app platforms. And there's, there's this term that, uh, John Gruber came up With a while back for the Mac called Mac asked Mac apps. And it was sort of this thought that like, like there are, there are applications that can run on the Mac and then there are Mac apps, right?

And you kind of know them, you kind of, when you see them, you know them like they feel idiomatically Mac and they have certain conventions and certain, certain UI, uh, ways that they're constructed and the ways they present things to the user. feel like, you know, like, Oh, like Apple could have built this directly, but it's even better than that, right?

Like, it's even better than Apple's own apps. This is a great Mac app. And I feel like there's, there's, there are certain key indicators of what makes a great web app. Like, this is a great web app. This is a great website. And What makes me sad is I feel like a lot of the popular frameworks and libraries that are in vogue because of DX don't produce good quality websites and web apps in the ways that I care about.

So I'm kind of wondering, like, is this DX because folks just like These sorts of tools, or is there a way to have great DX where the experience you have as a developer is steering you towards how to build things that are like idiomatically web and feel like they belong and take advantage of the web and its strengths.

Yeah, I,

Chris: um, I've heard other folks and I've used the phrase myself before, like with the grain of the web versus against it. And it feels like a lot of, um, a lot of the tools that certain developers get really excited about work against the grade of the web. So like a good example would be, um, I sometimes see developers behind certain CSS frameworks or libraries complaining about the cascade as if that's.

A bug and not a feature of how CSS works. And they'll design these very complex tools to basically stop the problems of the cascade rather than learning how the cascade works and using it to your advantage, because it could be a very powerful. Very powerful thing. Um, so yeah, that's a really good, uh, I think that's a really good explainer.

Um, I also, uh, I, I really enjoyed your article that you had written a little while back about the great gaslighting of the JavaScript age. Um, it was a piece that, uh, Like I almost gave myself brain damage reading it because I was nodding along so vigorously. It's like, it's one of those articles. It's so good.

I was angry at you for having written it instead of me. Um, it just really, it just really described a lot of, um, a lot of what I. I feel about, um, you know, how, how we build things now where, you know, kind of developers were sold this lie around these tools and what they do and don't do for us. And, uh, and it's just, it's created a lot of, um, just really bad websites and web apps.

That are slower than they should be, buggier than they should be, break a lot more easily, um, yeah. Yeah,

Jared: so for folks who haven't read that article, the, the, the gist of it was, and I intentionally used somewhat inflammatory language because I really want to get a certain point across. There's a certain point I was trying to get at, which you, you kind of have to like, Say like, Hey folks, like there's a thing here we need to talk about and like get people's attention because I feel like this, this point shouldn't be missed.

And, and that is this, uh, as I, as I mentioned before, I really like Ruby and I've like building applications in Ruby and, you know, in the past, sort of the, well, I guess still the, the top dog in the world of Ruby is the Ruby on Rails framework. And. Back in the early to mid, well, in the late 2000s into the, like, say, early 2010s, um, you know, a lot of folks were building a lot of cool stuff with Ruby on Rails, um, and the front end of that, in many respects, was, was pretty vanilla.

I mean, we, it started using, like, Prototype and some stuff a lot of folks haven't even heard of now, but then all of a sudden we're using jQuery and, I mean, we kind of had to at that time, right? Because browsers were crazy and there's so many things you had to kind of work around. So jQuery was the way to sort of smooth over those rough edges.

All

Chris: those if else clauses for different like features and methods.

Jared: Right. Like how do you attach an event to a button? Uh, so, but, but there's sort of this sense that like, generally we want to be like server rendering HTML and delivering that to the browser. And generally we want to present forms to the browser.

And when you submit the forms, they send form data to the server and it can process that form data. And Rails kind of helped pioneer ideas like rest of like, here's how you use URLs properly. And here's how you build out your controllers and your views. So there's sort of this mindset of, like, here's how you build web apps.

It wasn't perfect, and there were weird edge cases, and you could get into spaghetti code and all that stuff. Sure. But I think the basic gist of it was, like, the Rails framework was helping you build with the grain of the web and not against it, as we were saying before. But then... Almost on a dime, I feel like the industry was kind of pivoting rapidly to AngularJS.

And then after that, it was React. And, you know, we've had some other things come along too. But like, and all of a sudden, it's like, no, we're, we're building front ends that are distinct from back ends. And we're sending data over The wire using JSON APIs and bringing JSON back and updating state on the client and re rendering the HTML from the client and all this different stuff, right?

And you'd like go to a website and if your JavaScript wasn't working perfectly, you'd see blank, just blank. And a lot of folks in my community, you know, using rails and other tools like that, we're saying like. Hey, uh, hold on, hold on folks. Whoa, there, time out. Uh, what, what happened to progressive enhancement?

What happened to accessibility? What happened to like performance on slower devices? And like, what happens if you get a JavaScript error all of a sudden? Your forms just aren't submitting anymore. Like. What happened to all this stuff, right? Like we had this whole set of like best practices and like, here's how you dot your I's and and cross your T's to build a good web app and be a good citizen on the web and all this other stuff coming out that just did not feel like that at all.

And so we had to live through this era of the big SPA and all these client side frameworks, et cetera, et cetera. And then again, all of a sudden, almost on a dime, it feels like. Like the industry that produced the SPA is suddenly like, Oh, we need to server render HTML and we need to support progressive enhancement and we need to support SEO out of the box.

And we need to do all this stuff and accessibility and performance and all this stuff. Right. And, and like. We can help you get to this promised land of here's how you build web apps. And I'm thinking, how can the same sort of industry milieu that produced all the bad stuff suddenly be like, we know how to produce all the good stuff, use our tools.

And I'm like, do I deserve an apology here or something? Because this is literally stuff we were saying, like, a decade ago. I mean, we were saying this stuff a decade ago. And all of a sudden, like, I mean, don't get me wrong, it's great that people are talking about all this stuff. Excuse me. It's great people are talking about all this stuff, but...

Can I get at least a little, like, whoopsie? Sorry there, folks. We went a little detour with how web apps get built, but, but, you know, now we're, we're on the path of righteousness once more. I

Chris: hate the rebrand that happens, too. Um, I feel, I feel okay making fun of the folks at Basecamp because they're... Right wing shitheads, but like the, the like hot wire and this idea, like HTML over the wires.

If it's this novel concept that what if we sent HTML instead of Jason? Oh, wow. You guys are geniuses. I wish I had thought of that. Um, yeah, I, uh, I'm with you. So I, along those lines, what, um, when you look at kind of some of these newer tools, like, like atomic war, I'm sorry, not atomic, like Astro. Or Svelte, uh, where the idea is you kind of, you author your code either sometimes like directly with the same tools you used to before, or in the case of Svelte in a state based UI ish way, but, you know, you're compiling it into static HTML, like, how do you feel about that?

Is that a good thing? A bad thing? Is that, I think one of the things I wrestle with is, is that kind of the future of Was that the next big trend in web development, or is this just kind of some little stop gap that's guess us to whatever thing is next? Um, I think about, do you remember the transition from jQuery to React?

There was this weird in between thing where people were building all these like micro versions of jQuery, like umbrella JS and stuff to kind of like bridge the gap. So like, I can't tell if these tools are just like getting us from where we are to what's next or if they are what's next.

Jared: Yeah, it certainly feels like there are some, some areas where there's parallel evolution and kind of convergence on some new paradigms, which, you know, in many respects take some of the good things of the quote unquote old way of doing it, but modernize it and, and, make it, make it good once more.

Um, so that's exciting. Uh, I don't have a lot of experience specifically with Svelte. Um, but one, one thing that does bother me a bit right out at the gate with that and, you know, using SvelteKit as a framework for, for example, is, uh, You're locking yourself into one single view library instead of conventions, right?

Like if you adopt SvelteKit and build a website with it, you're stuck with Svelte. Like if you suddenly need to use view or even react or something else on some particular page, like how do you even do that? Um, whereas a quote unquote meta framework like Astro, uh, definitely intrigues me because, um, You know, out of the box, Astro does provide its own component model, but it's purely static or server side, if you will, right?

It's just a way of like defining essentially an HTML template that can take some data and render out some HTML and there you go. So it's, it's really just like a, a nicely evolved. Uh, you know, take on partials, HTML templates, whatever. So you can use Astro and ship zero JS to the client and you're fine, right?

That's his claim to fame. But then you can sort of define like, well, I want an island here. It's this island's architecture idea of like on this page, I need an island. And in this island, I need a React based form to do a bunch of Reacty stuff for a form. Okay, cool. Like, if you never go to that page. You never need to load React.

This is great, right? Like, only going to that page and, and hydrating that React form, if you will, suddenly you have, you know, the, the features of that world. Same for view, same for other things, even like Lit, which is a library for helping you build web components. You could just load Lit into an island on a certain page and so forth.

Um, you can also use these different technologies. purely to render stuff statically as well. Like if you say, well, I, I like React for building X, Y, and Z for whatever reason, you could use that to statically render some HTML, and it doesn't actually need to load React on the client. So Astro gives you all these sort of hooks into all these different tools, and you can decide as the developer.

You know, how you might want to use those, um, and I think as a default approach as a way of saying, like, how can we You know, potentially take advantage of all of these different view technologies that are out there, but avoid so many of the downsides and so much of the vendor lock in, if you will. Um, yeah, I, I think Astro's onto something and whether Astro itself becomes the thing over the next few years or whether it's other tools like it, who knows, but that, that approach in general really resonates with me.

Chris: This is interesting. So I'd never considered the lock in angle before. Um, whenever I've had these conversations, the thing that I've been intrigued by with Astro is that, uh, it has the potential to let. Developers keep using the tools they're already using and spit out less JavaScript. Um, so, uh, Oh God, what's his name now?

Hold on. Bear with me for just a second. Um, uh, so, uh, he, at the very least used to work over at, um, uh, Netlify. Um, and I'm drawing a blank on his first name. Uh, let's see here. Duh, duh, duh, duh, duh. Jason. There we go. I wanted to say Jared, but that's only cause I'm talking to you. Jason Langsdorf. Um, Took an app that he had built that was built with Next.

js and React and ported it into Astro, uh, with just a couple of, you know, tweaks to kind of bolt some stuff in, uh, and he reduced the amount of client side JS that got shipped by like 90%, which had obviously a huge, uh, improvement in page load time. So for me, one of the intriguing things about Astro was like, Oh, cool.

Like, so developers can keep doing stuff that they've been, they're going to do anyways, and we'll get a better front end experience. The, um, uh, the, I guess, pessimist in me, skeptic, um, looks at that and goes, Oh, great. So developers can keep doing the same shitty things they've been doing and just bandaid over these bad practices with tooling.

Um, and I'm not, you know, I, I don't think it's like an either or thing. I think it's probably a little bit of both, but, um, you know, I do, I do sometimes worry that we use tools as a, a crutch for. Uh, like learning good development practices, and I don't, I just don't know how to reconcile that because I think it's also, it's useful, obviously, um, but, uh, I worry that it maybe exacerbates some bad, bad habits that should go away.

Jared: Oh yeah, yeah, I completely agree with that. I mean, it, it, it, it's, it's painful. Sometimes when, when you go out there and look at the job market and look at different positions and what, you know, what companies are hiring for, and, you know, they're really zeroing in on like, we're hiring a react developer, or we're hiring a view developer, or hiring an angular developer.

And I kind of feel like I, I wish we could just say like, we're hiring a web developer, we're hiring somebody who builds things on the web, like. We've, we've, we've become so locked into the idea that a particular library or particular framework, like, is how you reason about development versus we're building something for the web using Um, The web, you know, vanilla technologies, the stuff you talk about all the time, right?

Like we're, we're building something for the web using the web. Like browsers have gotten great. There's so many awesome APIs out there. Like we're going to do that. And in specific cases for specific needs, if we need to pull in a dependency, we can do that. But that's not the default, right? The default isn't, you know, you load up package.

json or God forbid the lock file and realize you have like. 1. 5 gigabytes of dependencies just to build Hello World. Like, it baffles me. Oh, and

Chris: oh, by the way, the ones you already have installed are out of date, so you gotta try and fix some

Jared: things. Yeah, yeah, like somebody just the other day was posting a link to like a...

Like there was some thread about like, ah, it's hard to even like build a simple package through MTM these days. Cause there's like all this different stuff you have to consider, you know, all these different runtimes and CJS versus ESM and this and that and everything. And somebody's like, Oh, don't worry about all that stuff.

I have a starter kit for you. Just use this repo and use that to build your library. And I took a look at the link and just to have the repo for building the library, which. doesn't have any code yet, right? Like you haven't actually done anything. It's just the starter. Like the number of dependencies are insane.

Like all these build tools and linters and configurations and folders and all this different stuff that's going on that you have to like understand and maintain and support going forward before you've written one line of code. I'm just like, why?

Chris: I wonder too how much, um, the tech industry has a, um, kind of a, a pattern of people staying in jobs for very short amounts of time, right?

So year or two here, year or two there, um, and I sometimes wonder if developers never having to really like. reconcile with the long term consequences of the tech decisions they make fuels more of this behavior, right? Because like you build it, you never have to maintain it. You're gone before that like comes up.

Um, uh, just the, the, the maintenance on some of these things.

Jared: Or you have a company where you have a whole team of people that are just maintaining one library among many libraries that are maintained through this company that rely on a bunch of other large companies, libraries that are maintained by large teams.

And meanwhile, like The world I generally, you know, the oceans I usually swim in are, like, really small teams or solo developers, and sometimes the organizations, the clients, whatever, of, you know, utilizing these projects aren't even themselves technical, right? Like, Like, it's not like the tech industry.

It's more like somebody is trying to build something for their business, their organization, their industry. And they bring someone like me on to do some of this technical work. So. I have to be, like, really judicial about what I choose to use, like, I have to understand it really well and be confident it's gonna be around for a long time and I can maintain it and support it and not all of a sudden one day, like, run into some crazy upgrade thing and be like, well, I'm gonna have to charge you a bucket load of new money.

To get any of this new stuff to work because like, they've pulled the rug out from under me. They've rebuilt the airplane midair. They've done all this stuff, right? And now we have to change everything. Like, I just can't go to a client and say that. They're going to be like, well, sorry, we'll be stuck on, you know, version two when version eight is now out for the rest of time.

You

Chris: know, I sometimes, um, one of the things I love about teaching vanilla JavaScript Transcribed Is that my courses don't really become out of date all that often. I periodically have to add new stuff as the platform evolves. But, you know, if a technique for appending an element into the DOM worked a decade ago, it still works today.

There might be a newer, better way to do it, but it's not like, you know, it won't not work anymore. Um, whereas, you know, if you're Uh, my, my friends who teach how to, how to work with libraries and stuff, like every couple of years, they have to update them as new kind of paradigms come and new versions come out that break some of the old ways of doing things.

Um, the flip side of that you're talking is I'm realizing it's like an instant, like. hash printing machine for them, right? Because then everybody has to go, like, learn how to do the new way of doing things. Um, uh, one of the things you mentioned to me, Jared, was, um, kind of this idea of unbundling from some of these larger front end Frameworks.

So, what does that look like? Do we have the tools to do that today? Are there like some missing pieces that would make it a lot easier? Um, you know, kind of like what's the, like, what does that, what does that look like? Is that something you, you do for clients or, um, you know, like where are we in, in kind of the, I guess the life of the modern

Jared: web?

Well, Chris, I was listening to the vanilla JS podcast the other day.

Chris: That guy's a jerk. I can't, don't listen to him.

Jared: Ah. Yeah. Yeah. No, it was very fascinating because, uh, no joke here because, uh, you were talking about, you know, using template literals to sort of maybe render a chunk of HTML from JavaScript if you need to do that sort of thing versus something like JSX.

But, uh, currently there's not sort of a pervasive browser API for sanitizing incoming data in order. The insert an HTML like that, um, and that, that's the kind of stuff that, um, really interests me about building for the web. And that is like, like increasingly we do have browser APIs like that.

Increasingly we do have like an API to do this one thing and another API, uh, API to do this, this other one thing. And I wish we had like user land, you know. Dependency packages, uh, that were also like that for the front end, right? Like, I'm sure there, there are things like that out there, but I feel like, you know, a lot of folks, instead of thinking like, well, I need to sanitize my incoming data before I stick it into my HTML.

So I'll use this very tiny little library that does that one thing very well. And it's. You know, it's been around a long time and it doesn't really change much because we don't want to change like it worked out all the security kinks and now it's, it just works. We'll pull that in and we'll use that. Um, instead of like.

We use React, right? React does it all. React sanitizes everything. React provides its own syntax with JSX. React provides this entire component model, all these hooks, all of these different, uh, ways of rendering things. Now we have React server components that are different than React client components and like all this stuff that's like React and you have to buy into React versus.

Just one tiny little library to do one tiny little thing and that's all you need to do on this particular project for this particular need. Um, and that's kind of what I'm getting to with unbundling. And I even see this in the wonderful world of web components, right? Like even in the world of web components where we now have some cool browser APIs to help you build kind of your own component model, just using custom HTML elements.

Um, there's still this tendency of Well, I'm going to use Lit to build all my components and Lit does it all. Lit handles the life cycles and the different rendering passes and the, and the Lit HTML syntax and the, the dynamic properties that can automatically reflect into attributes and vice versa. And it can like convert from one data format to another.

So I can like pass JSON as a property and it'll get converted to like a string representation in the attribute, like all this stuff, right? All this stuff bundled into Lit. And Lit's actually a pretty small library and pretty great with performance, but still like has all the stuff in it. And I'm thinking, what if I just want a way to Make attributes a little easier to use when I build a vanilla web component and like that's all I need for this thing or maybe I want something that just handles like a more declarative way of rendering out some HTML from a JavaScript file.

I just need that right now, right? So these, these tiny little libraries that do tiny little things and you can kind of compose them together. Um, and it's kind of like the Unix philosophy. I'm going old school here, but like the old Unix philosophy, like you have these, these little command line utilities and you kind of pipe them together and you send the output of one into the input of another and and by chaining these little.

Utilities together, you can essentially build like workflows and do all this cool stuff versus like the one true command line app that does it all. So I really like that sort of old school Unix philosophy as applied to web development. And I think it adheres better to how browsers work because at some point in the future, if the browser itself's like, Hey, here's an API to do attribute property reflection for a web component.

Cool. I can drop the library I was using, use the browser API and we're done. I don't have to like reinvent the whole world around it because like, Oh, well, you know, I'm using lit or whatever for everything. So I just have to use what it provides. I can't switch to the browser API here. Cause I'd have to back out of all of my technology decisions I've ever made.

Yeah.

Chris: I, um, I sometimes refer to that as, um, like we, we as an industry seem to really like, like Swiss army knife tools when we really just need like the toothpick, you know, or like the, the scissors. Um, And, uh, yeah, I don't know. I don't know what it is. It's, um, uh, it's a marketing thing, you know, like a lot of these tools really push the fact that they do all the things.

Um, but it does make it very, very hard to wean yourself off of them because, as you noted, all of your other Design decisions are then locked into that, that tool. Um, I know the one I really, really want, like, I want a, um, I want a browser API for, uh, diffing HTML strings. Like I really want to be able to say, here's an element, here's a string, make them look the same with as little change as possible, um, uh, versus like inner HTML that just completely wipes everything out and starts fresh.

Um, uh, that would eliminate about 99% of what. I think a lot of people use state based UI for, um, which is just simple, uh, you know, simple changes to, I've got this, this HTML that's tied to this data. And, uh, you know, I don't want to wipe out an entire form every time, like one little thing changes. Um,

Jared: yeah, that would be cool.

Right. That's my big,

Chris: that's my big dream, Jared. It's, it's, it's actually, it's humble. Um, So thinking about, um, kind of decoupling today, are there any particular, like tools or libraries or approaches that you think work really, really well? Like if you were starting a greenfield project today. Um, you know, like, what are you, I guess, what are your tools of choice?

Like, where do you, where do you start? And, um, I, I guess the kind of the caveat here is I always get pushed back. Oh, well, that works great. If you're like a, just like a solo developer, but like, you know, if you're working with like a team that that'll never work. Um, you know, so I guess just with that, knowing that there's going to be some, some people who are like that in mind, like what, um, Uh, usually on Twitter, not, not so much the podcast, but you know, like, what, what does that look like?

Like, what, can we do that today? Can we, can we start decoupling from, from these big libraries or? Yeah, that's,

Jared: that's a good question. And I don't know that I have a, a comprehensive answer because, you know, one of the things that can make this a bit frustrating is it's hard to find. It's hard to find the system of record for, like, where all these cool little libraries get promoted, right?

Like, you know, maybe if you're using React or Vue or Svelte or one of these things and you search, you know, like... Best react form library. Like you get a few like react, took form bubble up real quick and you can just be like, okay, I'll just use that. Um, and I've been on a project in the past where that's exactly what happened.

Right. Whereas if you're searching for like, what, what are, what are just some ways to help me have a little bit of a nicer experience building out form validation using the browsers, native vanilla form validation APIs, uh, like. Finding that kind of stuff can be challenging, um, so I think it's really important to be, to, to like find spaces and this is going to sound like I'm plugging my own thing here, but in a general sense, I think it's, it's, it's helpful to find spaces where like that's the stuff folks talk about.

Um, and again, like a lot of sort of general web development forums and, you know, Reddit groups, whatever out there, like. There's not an impetus to be like, go for the leanest, vanilla est default approach first. It's more like, oh, I need to do this thing. Okay, here's a React, uh, React library. Uh, but, so you have to, like, intentionally search out places.

So, you know, one of the things I've been trying to do with the Spicy Web Discord, which I help run, uh, is to be a place where folks can ask questions like that and, like, offer helpful suggestions. And it's, it's sort of understood that, like, We're not going to just immediately jump to, Oh, have you used view for that?

Have you, you know, installed this giant framework that does it all to, to, you know, fix this one problem you're having. Um, so yeah, so there's a certain element, I guess, of just word of mouth to help folks learn some of this stuff. Um, and then in terms of particular libraries, I'm super enthusiastic about it.

I'll, I'll throw a couple out there. Um, one is, uh, actually mentioned earlier, Hotwire Turbo. Uh, I think turbos. Pretty fantastic library. It's, it's not perfect, but, uh, the thing I really like about Turbo is like, you can take your totally vanilla HTML, whether that's server rendered or statically generated, and you can take totally vanilla forms, et cetera.

And just by sticking Turbo on the page, it suddenly feels a lot like an SPA in terms of like, you know, if you submit the form, the entire. page doesn't just like blow away in an entire new page load, it just kind of just swaps out the HTML needs to, um, and you can, you know, have that be for the, for like everything on the page kind of by default, or you can get more targeted of like, when I submit this thing, Just send me back a little fragment of HTML and I can just direct where that gets updated on the page.

And there's other libraries that do this too, like htmx and unpoly. There's like a few out there that do this kind of stuff, which can be interesting to check out. Um, but I'm personally familiar with Turbo and really like how that works and, and TurboStreams. Also is a pretty cool idea too. And the way that works is, um, they have just like a few little, what are essentially custom elements, like literal turbo stream elements that are just kind of like directives, right?

It's like for an element that has an ID of foo, here's some. HTML with bar in it, update foo, right? And, and by, and by sending those sort of commands or directives, or I guess they call them actions, by saying those actions over the wire as HTML, you can use like any backend you want, right? Like any backend you could possibly imagine could just generate a few turbo stream actions and send them over and then parts of your page update.

Right? And it feels magical. It feels like, wait, I don't need a whole SPA, client side framework, components, all this stuff to do something like that. I can just use this one little library and HTML. Um, so that's, that's a go to for me for most projects. I mean, like if it's a simple blog or whatever, I might not bother, right?

But if it's like a more advanced application, I really take advantage of Turbo. Um, and then the other library I really like is a, is a component library called Shoelace. I'm And Shoelace uses web components under the hood, but you don't really need to know most of those, you know, details. You can just literally say, I just, I just need like a nice looking button.

I'll import a button. And it uses a button tag under the hood, but you would just write like sl button for shoelace button. And you can just use that on your page. And it comes with cards and dialogues and all these different things. And you can. Kind of use it out of the box. It looks pretty good as is, but you can also customize a lot of stuff with some CSS variables or with like, um, what they're called shadow parts, which not a lot of folks know about, but just real quick, uh, because, um, They use the shadow DOM under the hood inside the web components.

It exposes like parts of the component as literally parts that you can style with CSS, which makes it pretty flexible. And yeah, I'll reach for shoelace a lot on different projects when it's just like, Oh, I just need like a color picker. And I know like, again, browsers themselves now offer like native color pickers, but if you need one that's, you know, more fancy and you can like define preset colors to choose from and all this different stuff, like you can just pop a shoelace color picker in an app and that's it.

Like you don't need any other library. You don't need to be using react or view or whatever. Like it literally can work anywhere. And I, I, I know this to be true because, uh, I worked on a project a while back that was like an old rails app, like. Built a long, long time ago, and, you know, the view layers like pretty crafty and gnarly these days, even for Rails app, um, but they need a really nice way to pick some colors for a template that folks can like edit on the site.

And, um, it's just like, okay. Shoelace color picker, boom. And it worked and the colors submit with the rest of the form and you're done. Uh, so shoelace is really cool.

Chris: Yeah, this looks a lot like, um, if bootstrap was built with web components and I know it's maybe not a fair comparison. I know bootstrap gets a lot of, like a lot of hate, but, um.

This is really cool. It's just got like a bunch of, a bunch of components that are rendered with web components.

Jared: This is awesome. Yeah. Yeah. And you can literally just import one at a time. And they even recently added an auto loader. So like you don't even need to import a thing. You can like drop one script tag that pulls from a CDN somewhere in your site.

And then anytime you use an SL dash, whatever, whether that's a button or card or color picker or it'll just like auto download that. And Display it.

Chris: Well, that's fancy. Oh my gosh. Well, you've just given me something to play with for the afternoon. Thank you. Thank you so much, Jared. Um, hey, it was really, really great chatting with you.

Um, uh, I feel like we could probably go for another like hour or three, just like talking about various things. Um, for folks who want to learn more about you, about your work, um, the spicy web, the discord, all that, what's, what's the best, where should they go? Uh, yeah, the websites

Jared: that, uh,

is spicy web. dev. Um, and there's links to the Discord there and a few blog posts. Um, there's more stuff coming up. Like, I'm getting a video library set up because I have put some videos out on like YouTube and so forth, but I haven't super done a great job of promoting those. So, uh, so some websites are, are incoming.

Um, I'm also working on a course about, uh, CSS and design systems and a lot of stuff around. web components and Shadow DOM and styling around those. So, um, so that may be of interest to folks once that's ready to roll. Um, but yeah, otherwise I'm at jaredwhite.com and you can find me on Mastodon primarily. I'm jaredwhite@indieweb.social.

Chris: Nice. Awesome. Well, Jared, thank you so much for, uh, for coming on. It was really, really great to chat

Jared: with you today. Awesome. Thanks for having me.

